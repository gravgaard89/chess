{"version":3,"sources":["store/BoardStore.ts","Coordinate.ts","Piece.ts","Square.ts","SquareCoordinate.tsx","Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Type","Coordinate","col","row","this","other","rowLabel","colLabel","Piece","name","hasMoved","isWhite","type","value","PAWN","ROOK","KNIGHT","QUEEN","BISHOP","coordinates","Array","i","push","KING","Square","coordinate","isSelected","isSelectable","piece","observable","Color","boardStore","pieces","squareStartingPositions","changeTurn","isWhiteTurn","setOnlySquaresWithPiecesToSelectable","squares","forEach","element","reset","toggleToUpdateView","pieceAtPosition","square","find","x","getStraightMoves","straightMoves","selectedSquare","getDiagonalMoves","diagonalMoves","getPawnMoves","pawnPiece","moves","inFront","makeObservable","possibleMoves","isPressed","s","sameCoordinates","setPossibleMoves","oldSquare","toString","undefined","every","alert","toLocaleLowerCase","c1","c2","pieceList","filter","map","action","relativeMoves","some","y","computed","SquareCoordinate","observer","props","squareColor","Yellow","Pale","Green","pieceColor","titleString","title","className","onClick","handleClick","disabled","style","backgroundColor","position","border","color","top","left","React","handleClickedSquare","Board","whiteScore","blackScore","App","handleReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9d4eeab.chunk.js","sourcesContent":["import { action, computed, makeAutoObservable, makeObservable, observable } from \"mobx\";\nimport Coordinate from \"../Coordinate\";\nimport Piece from \"../Piece\";\nimport Square from \"../Square\";\n\nenum Type {\n    // PAWN = \"♙\",\n    // ROOK = \"♖\",\n    // KNIGHT = \"♘\",\n    // BISHOP = \"♗\",\n    // QUEEN = \"♕\",\n    // KING = \"♔\",\n\n    PAWN = \"♟\",\n    ROOK = \"♜\",\n    KNIGHT = \"♞\",\n    BISHOP = \"♝\",\n    QUEEN = \"♛\",\n    KING = \"♚\",\n}\n\nclass BoardStore {\n    pieces: Array<Piece>;\n    @observable squares: Array<Square>;\n    @observable isPressed: boolean;\n    @observable selectedSquare: Square;\n    @observable possibleMoves: Array<Coordinate>;\n    @observable isWhiteTurn: boolean;\n\n    constructor() {\n        makeObservable(this);\n        this.selectedSquare = new Square(new Coordinate(-1, -1));\n        this.possibleMoves = [];\n        this.isPressed = false;\n        this.pieces = [];\n        this.squares = this.squareStartingPositions();\n        this.isWhiteTurn = true;\n        this.setOnlySquaresWithPiecesToSelectable();\n    }\n\n    squareStartingPositions = () => {\n        return [\n            new Square(new Coordinate(0, 0), false, true, new Piece(\"Rook\", false, false, Type.ROOK)),\n            new Square(new Coordinate(1, 0), false, true, new Piece(\"Knight\", false, false, Type.KNIGHT)),\n            new Square(new Coordinate(2, 0), false, true, new Piece(\"Bishop\", false, false, Type.BISHOP)),\n            new Square(new Coordinate(3, 0), false, true, new Piece(\"King\", false, false, Type.KING)),\n            new Square(new Coordinate(4, 0), false, true, new Piece(\"Queen\", false, false, Type.QUEEN)),\n            new Square(new Coordinate(5, 0), false, true, new Piece(\"Bishop\", false, false, Type.BISHOP)),\n            new Square(new Coordinate(6, 0), false, true, new Piece(\"Knight\", false, false, Type.KNIGHT)),\n            new Square(new Coordinate(7, 0), false, true, new Piece(\"Rook\", false, false, Type.ROOK)),\n            new Square(new Coordinate(0, 1), false, true, new Piece(\"Pawn\", false, false, Type.PAWN)),\n            new Square(new Coordinate(1, 1), false, true, new Piece(\"Pawn\", false, false, Type.PAWN)),\n            new Square(new Coordinate(2, 1), false, true, new Piece(\"Pawn\", false, false, Type.PAWN)),\n            new Square(new Coordinate(3, 1), false, true, new Piece(\"Pawn\", false, false, Type.PAWN)),\n            new Square(new Coordinate(4, 1), false, true, new Piece(\"Pawn\", false, false, Type.PAWN)),\n            new Square(new Coordinate(5, 1), false, true, new Piece(\"Pawn\", false, false, Type.PAWN)),\n            new Square(new Coordinate(6, 1), false, true, new Piece(\"Pawn\", false, false, Type.PAWN)),\n            new Square(new Coordinate(7, 1), false, true, new Piece(\"Pawn\", false, false, Type.PAWN)),\n            new Square(new Coordinate(0, 2)),\n            new Square(new Coordinate(1, 2)),\n            new Square(new Coordinate(2, 2)),\n            new Square(new Coordinate(3, 2)),\n            new Square(new Coordinate(4, 2)),\n            new Square(new Coordinate(5, 2)),\n            new Square(new Coordinate(6, 2)),\n            new Square(new Coordinate(7, 2)),\n            new Square(new Coordinate(0, 3)),\n            new Square(new Coordinate(1, 3)),\n            new Square(new Coordinate(2, 3)),\n            new Square(new Coordinate(3, 3)),\n            new Square(new Coordinate(4, 3)),\n            new Square(new Coordinate(5, 3)),\n            new Square(new Coordinate(6, 3)),\n            new Square(new Coordinate(7, 3)),\n            new Square(new Coordinate(0, 4)),\n            new Square(new Coordinate(1, 4)),\n            new Square(new Coordinate(2, 4)),\n            new Square(new Coordinate(3, 4)),\n            new Square(new Coordinate(4, 4)),\n            new Square(new Coordinate(5, 4)),\n            new Square(new Coordinate(6, 4)),\n            new Square(new Coordinate(7, 4)),\n            new Square(new Coordinate(0, 5)),\n            new Square(new Coordinate(1, 5)),\n            new Square(new Coordinate(2, 5)),\n            new Square(new Coordinate(3, 5)),\n            new Square(new Coordinate(4, 5)),\n            new Square(new Coordinate(5, 5)),\n            new Square(new Coordinate(6, 5)),\n            new Square(new Coordinate(7, 5)),\n            new Square(new Coordinate(0, 6), false, true, new Piece(\"Pawn\", false, true, Type.PAWN)),\n            new Square(new Coordinate(1, 6), false, true, new Piece(\"Pawn\", false, true, Type.PAWN)),\n            new Square(new Coordinate(2, 6), false, true, new Piece(\"Pawn\", false, true, Type.PAWN)),\n            new Square(new Coordinate(3, 6), false, true, new Piece(\"Pawn\", false, true, Type.PAWN)),\n            new Square(new Coordinate(4, 6), false, true, new Piece(\"Pawn\", false, true, Type.PAWN)),\n            new Square(new Coordinate(5, 6), false, true, new Piece(\"Pawn\", false, true, Type.PAWN)),\n            new Square(new Coordinate(6, 6), false, true, new Piece(\"Pawn\", false, true, Type.PAWN)),\n            new Square(new Coordinate(7, 6), false, true, new Piece(\"Pawn\", false, true, Type.PAWN)),\n            new Square(new Coordinate(0, 7), false, true, new Piece(\"Rook\", false, true, Type.ROOK)),\n            new Square(new Coordinate(1, 7), false, true, new Piece(\"Knight\", false, true, Type.KNIGHT)),\n            new Square(new Coordinate(2, 7), false, true, new Piece(\"Bishop\", false, true, Type.BISHOP)),\n            new Square(new Coordinate(3, 7), false, true, new Piece(\"King\", false, true, Type.KING)),\n            new Square(new Coordinate(4, 7), false, true, new Piece(\"Queen\", false, true, Type.QUEEN)),\n            new Square(new Coordinate(5, 7), false, true, new Piece(\"Bishop\", false, true, Type.BISHOP)),\n            new Square(new Coordinate(6, 7), false, true, new Piece(\"Knight\", false, true, Type.KNIGHT)),\n            new Square(new Coordinate(7, 7), false, true, new Piece(\"Rook\", false, true, Type.ROOK)),\n        ];\n    };\n\n    handleClickedSquare(s: Square) {\n\n        if (this.sameCoordinates(s.coordinate, this.selectedSquare.coordinate)) {\n            this.selectedSquare.isSelected = false;\n            this.selectedSquare = new Square(new Coordinate(-1, -1));\n            this.setOnlySquaresWithPiecesToSelectable();\n        } else {\n            const canSetSelectedSquareAndMoves = (s.piece && s.piece.isWhite && this.isWhiteTurn) || (s.piece && !s.piece.isWhite && !this.isWhiteTurn);\n\n            if (canSetSelectedSquareAndMoves) {\n                s.isSelected = !s.isSelected;\n                this.selectedSquare = s;\n                this.setPossibleMoves();\n            } else {\n                s.piece = this.selectedSquare.piece;\n                const oldSquare = this.squares.find((x) => x.coordinate.toString() == this.selectedSquare.coordinate.toString());\n\n                if (oldSquare) {\n                    oldSquare.piece = undefined;\n                    oldSquare.isSelected = false;\n                }\n\n                this.changeTurn();\n            }\n\n            if (this.squares.every(x => !x.isSelectable)) {\n                alert(`No moves for ${s.piece?.isWhite ? \"white\" : \"black\"} ${s.piece?.name.toLocaleLowerCase()}`);\n                s.isSelected = !s.isSelected;\n                this.selectedSquare = new Square(new Coordinate(-1, -1));\n                this.setOnlySquaresWithPiecesToSelectable();\n            }\n\n        }\n        this.toggleToUpdateView();\n    }\n\n    changeTurn = () => {\n        this.isWhiteTurn = !this.isWhiteTurn;\n        this.setOnlySquaresWithPiecesToSelectable();\n    };\n\n    setOnlySquaresWithPiecesToSelectable = () => {\n        this.squares.forEach((element) => {\n            if ((element.piece && element.piece?.isWhite && this.isWhiteTurn) || (element.piece && !element.piece.isWhite && !this.isWhiteTurn)) {\n                element.isSelectable = true;\n            } else {\n                element.isSelectable = false;\n            }\n        });\n    };\n\n    reset = () => {\n        this.squares = this.squareStartingPositions();\n        this.toggleToUpdateView();\n        this.isWhiteTurn = true;\n        this.setOnlySquaresWithPiecesToSelectable();\n    };\n\n    @action toggleToUpdateView = () => {\n        this.isPressed = !this.isPressed;\n    };\n\n    @action setPossibleMoves = () => {\n        this.possibleMoves = [];\n        this.squares.forEach((element) => {\n            element.isSelectable = false;\n        });\n        if (this.selectedSquare.piece) {\n            let relativeMoves = Array<Coordinate>();\n            if (this.selectedSquare.piece.type == Type.PAWN) {\n                relativeMoves = this.getPawnMoves();\n            } else if (this.selectedSquare.piece.type == Type.ROOK) {\n                relativeMoves = this.getStraightMoves();\n            } else if (this.selectedSquare.piece.type == Type.BISHOP) {\n                relativeMoves = this.getDiagonalMoves();\n            } else if (this.selectedSquare.piece.type == Type.QUEEN) {\n                relativeMoves = [...this.getStraightMoves(), ...this.getDiagonalMoves()];\n            } else {\n                relativeMoves = this.selectedSquare.piece.relativeMoves();\n            }\n\n            this.possibleMoves = relativeMoves.map((x) => {\n                return new Coordinate(this.selectedSquare.coordinate.col + x.col, this.selectedSquare.coordinate.row + x.row);\n            });\n\n            const selectableSquares = this.squares.filter((x) => this.possibleMoves.some((y) => y.toString() == x.coordinate.toString()));\n            const selectableSquaresExceptFriendSquares = selectableSquares.filter((x) => (x.piece && x.piece.isWhite == !this.selectedSquare.piece?.isWhite) || !x.piece);\n\n\n            selectableSquaresExceptFriendSquares.forEach((element) => {\n                element.isSelectable = true;\n            });\n        }\n    };\n\n    pieceAtPosition = (col: number, row: number) => {\n        const square = this.squares.find(x => x.coordinate.col == col && x.coordinate.row == row);\n        return square?.piece ? true : false;\n    }\n\n    getStraightMoves = () => {\n        let straightMoves = new Array<Coordinate>();\n        //Moving North\n        for (let i = 1; i < 8; i++) {\n            straightMoves.push(new Coordinate(0, -i));\n            if (this.pieceAtPosition(this.selectedSquare.coordinate.col, this.selectedSquare?.coordinate.row - i)) {\n                break;\n            }\n        }\n\n        //Moving East\n        for (let i = 1; i < 8; i++) {\n            straightMoves.push(new Coordinate(i, 0));\n            if (this.pieceAtPosition(this.selectedSquare.coordinate.col + i, this.selectedSquare?.coordinate.row)) {\n                break;\n            }\n        }\n\n        //Moving South\n        for (let i = 1; i < 8; i++) {\n            straightMoves.push(new Coordinate(0, i));\n            if (this.pieceAtPosition(this.selectedSquare.coordinate.col, this.selectedSquare?.coordinate.row + i)) {\n                break;\n            }\n        }\n\n        //Moving West\n        for (let i = 1; i < 8; i++) {\n            straightMoves.push(new Coordinate(-i, 0));\n            if (this.pieceAtPosition(this.selectedSquare.coordinate.col - i, this.selectedSquare?.coordinate.row)) {\n                break;\n            }\n        }\n\n        return straightMoves;\n    }\n\n    getDiagonalMoves = () => {\n        let diagonalMoves = new Array<Coordinate>();\n\n        //Moving Nort-hwest\n        for (let i = 1; i < 8; i++) {\n            diagonalMoves.push(new Coordinate(-i, -i));\n            if (this.pieceAtPosition(this.selectedSquare.coordinate.col - i, this.selectedSquare?.coordinate.row - i)) {\n                break;\n            }\n        }\n\n        //Moving North-east\n        for (let i = 1; i < 8; i++) {\n            diagonalMoves.push(new Coordinate(i, -i));\n            if (this.pieceAtPosition(this.selectedSquare.coordinate.col + i, this.selectedSquare?.coordinate.row - i)) {\n                break;\n            }\n        }\n\n        //Moving South-east\n        for (let i = 1; i < 8; i++) {\n            diagonalMoves.push(new Coordinate(i, i));\n            if (this.pieceAtPosition(this.selectedSquare.coordinate.col + i, this.selectedSquare?.coordinate.row + i)) {\n                break;\n            }\n        }\n\n        //Moving South-west\n        for (let i = 1; i < 8; i++) {\n            diagonalMoves.push(new Coordinate(-i, i));\n            if (this.pieceAtPosition(this.selectedSquare.coordinate.col - i, this.selectedSquare?.coordinate.row + i)) {\n                break;\n            }\n        }\n\n        return diagonalMoves;\n    }\n\n    getPawnMoves = () => {\n        const pawnPiece = this.selectedSquare.piece;\n        let moves = new Array<Coordinate>();\n        const inFront = pawnPiece?.isWhite ? -1 : 1;\n\n        //Linear moves\n        const pieceInFront = this.pieceAtPosition(this.selectedSquare.coordinate.col, this.selectedSquare?.coordinate.row + inFront);\n        if (!pieceInFront) {\n            if (pawnPiece?.isWhite == true) {\n                if (pawnPiece.hasMoved) {\n                    moves.push(new Coordinate(0, -1));\n                } else {\n                    pawnPiece.hasMoved = true;\n                    moves.push(new Coordinate(0, -1));\n                    moves.push(new Coordinate(0, -2));\n                }\n            }\n            if (pawnPiece?.isWhite == false) {\n                if (pawnPiece.hasMoved) {\n                    moves.push(new Coordinate(0, 1));\n                } else {\n                    pawnPiece.hasMoved = true;\n                    moves.push(new Coordinate(0, 1));\n                    moves.push(new Coordinate(0, 2));\n                }\n            }\n        }\n\n        // Attacking moves\n        if (this.pieceAtPosition(this.selectedSquare.coordinate.col + 1, this.selectedSquare?.coordinate.row + inFront)) {\n            moves.push(new Coordinate(1, inFront));\n        }\n        if (this.pieceAtPosition(this.selectedSquare.coordinate.col - 1, this.selectedSquare?.coordinate.row + inFront)) {\n            moves.push(new Coordinate(-1, inFront));\n        }\n\n\n        return moves;\n    }\n\n    sameCoordinates(c1: Coordinate, c2: Coordinate) {\n        return c1.col == c2.col && c1.row == c2.row;\n    }\n\n    @computed\n    get whiteScore() {\n        if (this.isPressed) { }\n        const pieceList = this.squares.filter(x => x.piece && x.piece.isWhite == true).map(x => x.piece);\n        let value = 0;\n\n        pieceList.forEach(element => {\n            if (element != null) {\n                value += element?.value;\n            }\n        });\n        return value;\n    }\n\n    @computed\n    get blackScore() {\n        if (this.isPressed) { }\n        const pieceList = this.squares.filter(x => x.piece && x.piece.isWhite == false).map(x => x.piece);\n        let value = 0;\n\n        pieceList.forEach(element => {\n            if (element != null) {\n                value += element?.value;\n            }\n        });\n        return value;\n    }\n\n}\n\nconst boardStore = new BoardStore();\n\nexport { boardStore, Type };\n","export default class Coordinate {\n    row: number;\n    col: number;\n\n    constructor(col: number, row: number) {\n        this.col = col;\n        this.row = row;\n    }\n\n    /**\n     * Compare two coordinates\n     */\n    public equals(other: Coordinate): boolean {\n        return this.row == other.row && this.col == other.col;\n    }\n\n    /**\n     * Convert the this to board's coordinate\n     */\n    public getBoardCoordinateRepresentation() {\n        const rowLabel = 8 - this.row;\n        const colLabel = 8 - this.col;\n        return `(${rowLabel + \",\" + colLabel})`;\n    }\n\n    public toString(): string {\n        return `(${this.row},${this.col})`;\n    }\n}\n","import Coordinate from \"./Coordinate\";\nimport { Type } from \"./store/BoardStore\";\n\nexport default class Piece {\n    public name: string;\n    public hasMoved: boolean;\n    public isWhite: boolean;\n    public type: string;\n    public value: number;\n\n    constructor(name: string, hasMoved: boolean, isWhite: boolean, type: string) {\n        this.name = name;\n        this.hasMoved = hasMoved;\n        this.isWhite = isWhite;\n        this.type = type;\n\n        if (type == Type.PAWN) {\n            this.value = 1;\n        } else if (type == Type.ROOK) {\n            this.value = 5;\n        } else if (type == Type.KNIGHT) {\n            this.value = 3;\n        } else if (type == Type.ROOK || type == Type.ROOK) {\n            this.value = 3;\n        } else if (type == Type.QUEEN) {\n            this.value = 9;\n        } else {\n            this.value = 0;\n        }\n    }\n\n    public relativeMoves() {\n        if (this.type == Type.PAWN && this.isWhite == true) {\n            if (this.hasMoved) {\n                return [new Coordinate(0, -1)];\n            } else {\n                this.hasMoved = true;\n                return [new Coordinate(0, -1), new Coordinate(0, -2)];\n            }\n        }\n        if (this.type == Type.PAWN && this.isWhite == false) {\n            if (this.hasMoved) {\n                return [new Coordinate(0, 1)];\n            } else {\n                this.hasMoved = true;\n                return [new Coordinate(0, 1), new Coordinate(0, 2)];\n            }\n        }\n        if (this.type == Type.KNIGHT) {\n            return [\n                new Coordinate(-1, -2),\n                new Coordinate(1, -2),\n                new Coordinate(2, -1),\n                new Coordinate(2, 1),\n                new Coordinate(1, 2),\n                new Coordinate(-1, 2),\n                new Coordinate(-2, 1),\n                new Coordinate(-2, -1),\n            ];\n        }\n        if (this.type == Type.BISHOP) {\n            let coordinates = Array<Coordinate>();\n            for (let i = 1; i < 7; i++) {\n                coordinates.push(new Coordinate(i, i));\n                coordinates.push(new Coordinate(-i, -i));\n                coordinates.push(new Coordinate(-i, i));\n                coordinates.push(new Coordinate(i, -i));\n            }\n            return coordinates;\n        }\n        if (this.type == Type.ROOK) {\n            let coordinates = Array<Coordinate>();\n            for (let i = 1; i < 7; i++) {\n                coordinates.push(new Coordinate(0, i));\n                coordinates.push(new Coordinate(0, -i));\n                coordinates.push(new Coordinate(i, 0));\n                coordinates.push(new Coordinate(-i, 0));\n            }\n            return coordinates;\n        }\n        if (this.type == Type.QUEEN) {\n            let coordinates = Array<Coordinate>();\n            for (let i = 1; i < 8; i++) {\n                coordinates.push(new Coordinate(i, i));\n                coordinates.push(new Coordinate(-i, -i));\n                coordinates.push(new Coordinate(-i, i));\n                coordinates.push(new Coordinate(i, -i));\n                coordinates.push(new Coordinate(0, i));\n                coordinates.push(new Coordinate(0, -i));\n                coordinates.push(new Coordinate(i, 0));\n                coordinates.push(new Coordinate(-i, 0));\n            }\n            return coordinates;\n        }\n        if (this.type == Type.KING) {\n            return [\n                new Coordinate(1, -1),\n                new Coordinate(1, 0),\n                new Coordinate(1, 1),\n                new Coordinate(0, 1),\n                new Coordinate(-1, 1),\n                new Coordinate(-1, 0),\n                new Coordinate(-1, -1),\n                new Coordinate(0, -1),\n            ];\n        }\n        return [];\n    }\n}\n","import { observable } from \"mobx\";\nimport Coordinate from \"./Coordinate\";\nimport Piece from \"./Piece\";\nimport { Type } from \"./store/BoardStore\";\n\nexport default class Square {\n    @observable public coordinate: Coordinate;\n    @observable public isSelected?: boolean;\n    @observable public isSelectable?: boolean;\n    @observable public piece?: Piece;\n    @observable public value?: number;\n\n    constructor(coordinate: Coordinate, isSelected?: boolean, isSelectable?: boolean, piece?: Piece) {\n        this.coordinate = coordinate;\n        this.isSelected = isSelected;\n        this.isSelectable = isSelectable;\n        this.piece = piece;\n    }\n}\n","import { action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport Square from \"./Square\";\nimport { boardStore, Type } from \"./store/BoardStore\";\n\nenum Color {\n    Pale = \"#edecd4\",\n    Green = \"#7d945d\",\n    Yellow = \"#f7f594\",\n}\n\ninterface ISquareCoordinate {\n    square: Square;\n    isPressed: boolean;\n}\n\n@observer\nexport default class SquareCoordinate extends React.Component<ISquareCoordinate, any> {\n    @action handleClick = (square: Square) => {\n        boardStore.handleClickedSquare(square);\n    };\n\n\n    render() {\n        const { square } = this.props;\n\n        const { isSelected, coordinate, piece } = square;\n\n        let squareColor = \"\";\n\n        if (square.isSelectable) {\n            squareColor = Color.Yellow;\n        }\n        const coordinateSum = coordinate.col + coordinate.row;\n        let isEvenCoordinate = coordinateSum % 2 == 0\n\n        squareColor = isEvenCoordinate ? Color.Pale : Color.Green;\n\n\n        if (isSelected) {\n            squareColor = Color.Yellow;\n        }\n\n        let pieceColor = piece?.isWhite ? \"white\" : \"black\"\n\n        if (square.isSelectable) {\n            squareColor = \"blue\";\n        }\n\n        let titleString = \"\";\n        if (piece && piece.type != Type.KING) {\n\n            titleString = `${piece.name} has a value of ${piece.value}`;\n        }\n\n\n        return (\n            <button title={titleString} className=\"square\" onClick={() => this.handleClick(square)} disabled={!isSelected && !square.isSelectable} style={{ backgroundColor: squareColor, position: \"relative\", border: 0 }}>\n                {/* <div> */}\n                {/* <span style={{ fontSize: 6 }}>{\"Col: \" + square.coordinate.col + \" Row: \" + square.coordinate.row}</span> */}\n                <span style={{ color: pieceColor, position: \"absolute\", top: 7, left: 25 }} > {piece?.type || \"\"}</ span>\n                {/* </div> */}\n            </button >\n        );\n    }\n}\n","import * as React from \"react\";\nimport { boardStore } from \"./store/BoardStore\";\nimport { observer } from \"mobx-react\";\nimport SquareCoordinate from \"./SquareCoordinate\";\nimport Square from \"./Square\";\nimport Coordinate from \"./Coordinate\";\n\n@observer\nclass Board extends React.Component {\n    renderSquare(square: Square, isPressed: boolean) {\n        return <SquareCoordinate square={square} isPressed={isPressed} />;\n    }\n\n    getSquare(col: number, row: number) {\n        const square = boardStore.squares.find((x) => x.coordinate === new Coordinate(col, row));\n        return square;\n    }\n\n    render() {\n        const { squares, isPressed, whiteScore, blackScore } = boardStore;\n\n        return (\n            <div>\n                <div>\n                    <SquareCoordinate square={squares[0]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[1]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[2]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[3]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[4]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[5]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[6]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[7]} isPressed={isPressed} />\n                </div>\n                <div>\n                    <SquareCoordinate square={squares[8]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[9]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[10]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[11]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[12]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[13]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[14]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[15]} isPressed={isPressed} />\n                </div>\n                <div>\n                    <SquareCoordinate square={squares[16]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[17]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[18]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[19]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[20]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[21]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[22]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[23]} isPressed={isPressed} />\n                </div>\n                <div>\n                    <SquareCoordinate square={squares[24]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[25]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[26]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[27]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[28]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[29]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[30]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[31]} isPressed={isPressed} />\n                </div>\n                <div>\n                    <SquareCoordinate square={squares[32]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[33]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[34]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[35]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[36]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[37]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[38]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[39]} isPressed={isPressed} />\n                </div>\n                <div>\n                    <SquareCoordinate square={squares[40]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[41]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[42]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[43]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[44]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[45]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[46]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[47]} isPressed={isPressed} />\n                </div>\n                <div>\n                    <SquareCoordinate square={squares[48]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[49]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[50]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[51]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[52]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[53]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[54]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[55]} isPressed={isPressed} />\n                </div>\n                <div>\n                    <SquareCoordinate square={squares[56]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[57]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[58]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[59]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[60]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[61]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[62]} isPressed={isPressed} />\n                    <SquareCoordinate square={squares[63]} isPressed={isPressed} />\n                </div>\n                {whiteScore != blackScore &&\n                    <p>{whiteScore > blackScore ? \"White +\" + (whiteScore - blackScore) : \"Black +\" + (blackScore - whiteScore)}</p>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import * as React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Board from \"./Board\";\nimport { boardStore } from \"./store/BoardStore\";\nimport { observer } from \"mobx-react\";\nimport { action } from \"mobx\";\nimport SquareCoordinate from \"./SquareCoordinate\";\n\n@observer\nclass App extends React.Component {\n    @action handleReset = () => {\n        boardStore.reset();\n    };\n\n    render() {\n        const { isWhiteTurn } = boardStore;\n        return (\n            <>\n                <button onClick={() => this.handleReset()}>Reset</button>\n                <div className=\"status\">{isWhiteTurn ? \"White \" : \"Black \"} to move</div>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board />\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}